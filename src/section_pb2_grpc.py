# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import section_pb2 as section__pb2


class SectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRotationItems = channel.unary_unary(
                '/accelbyte.platform.catalog.section.v1.Section/GetRotationItems',
                request_serializer=section__pb2.GetRotationItemsRequest.SerializeToString,
                response_deserializer=section__pb2.GetRotationItemsResponse.FromString,
                )
        self.Backfill = channel.unary_unary(
                '/accelbyte.platform.catalog.section.v1.Section/Backfill',
                request_serializer=section__pb2.BackfillRequest.SerializeToString,
                response_deserializer=section__pb2.BackfillResponse.FromString,
                )


class SectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRotationItems(self, request, context):
        """*
        GetRotationItems: get current rotation items, this method will be called by rotation type is CUSTOM
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Backfill(self, request, context):
        """*
        Backfill method trigger condition:
        1. Rotation type is FIXED_PERIOD
        2. Backfill type is CUSTOM
        3. User already owned any one of current rotation items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRotationItems': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRotationItems,
                    request_deserializer=section__pb2.GetRotationItemsRequest.FromString,
                    response_serializer=section__pb2.GetRotationItemsResponse.SerializeToString,
            ),
            'Backfill': grpc.unary_unary_rpc_method_handler(
                    servicer.Backfill,
                    request_deserializer=section__pb2.BackfillRequest.FromString,
                    response_serializer=section__pb2.BackfillResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'accelbyte.platform.catalog.section.v1.Section', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Section(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRotationItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/accelbyte.platform.catalog.section.v1.Section/GetRotationItems',
            section__pb2.GetRotationItemsRequest.SerializeToString,
            section__pb2.GetRotationItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Backfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/accelbyte.platform.catalog.section.v1.Section/Backfill',
            section__pb2.BackfillRequest.SerializeToString,
            section__pb2.BackfillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
